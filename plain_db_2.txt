--
-- PostgreSQL database dump
--

-- Dumped from database version 15.14
-- Dumped by pg_dump version 17.5

-- Started on 2025-09-16 06:10:30 -03

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 233 (class 1255 OID 16509)
-- Name: insert_multi_release_escrow_full(text, text, text, text, integer, numeric, text, timestamp with time zone, timestamp with time zone, text, smallint, text, timestamp with time zone, timestamp with time zone, text, text, text, text, text, text, timestamp with time zone, timestamp with time zone, boolean, text, text, timestamp with time zone, timestamp with time zone, jsonb, jsonb); Type: FUNCTION; Schema: public; Owner: indexer
--

CREATE FUNCTION public.insert_multi_release_escrow_full(p_contract_id text, p_contract_base_id text, p_description text, p_engagement_id text, p_platform_fee integer, p_receiver_memo numeric, p_signer text, p_created_at timestamp with time zone, p_updated_at timestamp with time zone, p_trust_address text, p_trust_decimals smallint, p_trust_name text, p_trust_created_at timestamp with time zone, p_trust_updated_at timestamp with time zone, p_approver text, p_dispute_resolver text, p_platform_address text, p_receiver text, p_release_signer text, p_service_provider text, p_roles_created_at timestamp with time zone, p_roles_updated_at timestamp with time zone, p_is_actived boolean, p_status text, p_reason text, p_status_created_at timestamp with time zone, p_status_updated_at timestamp with time zone, p_milestones jsonb, p_configs jsonb DEFAULT NULL::jsonb) RETURNS jsonb
    LANGUAGE plpgsql
    AS $$
DECLARE
  elem             JSONB;
  v_idx            INT;
  v_amount         NUMERIC(39,0);
  v_balance        NUMERIC(39,0);
  v_description    TEXT;
  v_status         TEXT;
  v_approved_at    TIMESTAMPTZ;
  v_m_created_at   TIMESTAMPTZ;
  v_m_updated_at   TIMESTAMPTZ;

  v_flags          JSONB;
  v_approved_b     BOOLEAN;
  v_disputed_b     BOOLEAN;
  v_released_b     BOOLEAN;
  v_resolved_b     BOOLEAN;

  ins_ms_count     INT := 0;
  ins_cfg_count    INT := 0;
  total_amount_raw NUMERIC(39,0) := 0;
BEGIN
  -- Validaciones mínimas
  IF p_platform_fee < 0 OR p_platform_fee > 10000 THEN
    RAISE EXCEPTION 'platform_fee fuera de rango (0..10000)';
  END IF;
  IF p_trust_decimals < 0 OR p_trust_decimals > 18 THEN
    RAISE EXCEPTION 'decimals fuera de rango (0..18)';
  END IF;
  IF EXISTS (SELECT 1 FROM multi_release_escrow WHERE contract_id = p_contract_id) THEN
    RAISE EXCEPTION 'multi_release_escrow ya existe para %', p_contract_id;
  END IF;

  -- 1) multi_release_escrow
  INSERT INTO multi_release_escrow(
    contract_id, contract_base_id, description, engagement_id,
    platform_fee, receiver_memo, signer, created_at, updated_at
  ) VALUES (
    p_contract_id, p_contract_base_id, p_description, p_engagement_id,
    p_platform_fee, p_receiver_memo, p_signer, p_created_at, p_updated_at
  );

  -- 2) escrow_trustline
  INSERT INTO escrow_trustline(contract_id, address, decimals, name, created_at, updated_at)
  VALUES (p_contract_id, p_trust_address, p_trust_decimals, p_trust_name, p_trust_created_at, p_trust_updated_at);

  -- 3) escrow_roles
  INSERT INTO escrow_roles(
    contract_id, approver, dispute_resolver, platform_address, receiver,
    release_signer, service_provider, created_at, updated_at
  ) VALUES (
    p_contract_id, p_approver, p_dispute_resolver, p_platform_address, p_receiver,
    p_release_signer, p_service_provider, p_roles_created_at, p_roles_updated_at
  );

  -- 4) escrow_status
  INSERT INTO escrow_status(contract_id, is_actived, status, reason, created_at, updated_at)
  VALUES (p_contract_id, p_is_actived, p_status, p_reason, p_status_created_at, p_status_updated_at);

  -- 5) milestones + flags
  IF p_milestones IS NOT NULL THEN
    FOR elem IN SELECT * FROM jsonb_array_elements(p_milestones)
    LOOP
      v_idx          := (elem ->> 'milestone_index')::INT;
      v_amount       := (elem ->> 'amount')::NUMERIC;
      v_balance      := NULLIF(elem ->> 'balance','')::NUMERIC;
      v_description  := (elem ->> 'description');
      v_status       := (elem ->> 'status');
      v_approved_at  := NULLIF(elem ->> 'approved_at','')::timestamptz;
      v_m_created_at := (elem ->> 'created_at')::timestamptz;
      v_m_updated_at := (elem ->> 'updated_at')::timestamptz;

      IF v_idx IS NULL OR v_idx < 0 THEN
        RAISE EXCEPTION 'milestone_index inválido';
      END IF;
      IF v_amount IS NULL OR v_amount <= 0 THEN
        RAISE EXCEPTION 'amount inválido en milestone %', v_idx;
      END IF;

      INSERT INTO multi_release_milestone(
        contract_id, milestone_index, amount, balance, description, status,
        approved_at, created_at, updated_at
      ) VALUES (
        p_contract_id, v_idx, v_amount, COALESCE(v_balance, v_amount),
        v_description, v_status, v_approved_at, v_m_created_at, v_m_updated_at
      );
      ins_ms_count := ins_ms_count + 1;
      total_amount_raw := total_amount_raw + v_amount;

      v_flags        := elem -> 'flags';
      v_approved_b   := COALESCE((v_flags ->> 'approved')::BOOLEAN, FALSE);
      v_disputed_b   := COALESCE((v_flags ->> 'disputed')::BOOLEAN, FALSE);
      v_released_b   := COALESCE((v_flags ->> 'released')::BOOLEAN, FALSE);
      v_resolved_b   := COALESCE((v_flags ->> 'resolved')::BOOLEAN, FALSE);

      INSERT INTO escrow_milestone_flags(
        contract_id, milestone_index, approved, disputed, released, resolved,
        created_at, updated_at
      ) VALUES (
        p_contract_id, v_idx, v_approved_b, v_disputed_b, v_released_b, v_resolved_b,
        v_m_created_at, v_m_updated_at
      );
    END LOOP;
  END IF;

  -- 6) configs (opcional)
  IF p_configs IS NOT NULL AND jsonb_typeof(p_configs) = 'object' THEN
    FOR elem IN SELECT * FROM jsonb_each(p_configs)
    LOOP
      INSERT INTO escrow_config(
        contract_id, key, function_name, params, schedule_cron, schedule_every,
        enabled, created_at, updated_at
      ) VALUES (
        p_contract_id,
        elem.key,
        (elem.value ->> 'function_name'),
        COALESCE(elem.value -> 'params', '{}'::jsonb),
        NULLIF(elem.value ->> 'schedule_cron',''),
        NULLIF(elem.value ->> 'schedule_every','')::interval,
        COALESCE((elem.value ->> 'enabled')::BOOLEAN, TRUE),
        (elem.value ->> 'created_at')::timestamptz,
        (elem.value ->> 'updated_at')::timestamptz
      );
      ins_cfg_count := ins_cfg_count + 1;
    END LOOP;
  END IF;

  RETURN jsonb_build_object(
    'contractId', p_contract_id,
    'type', 'multi-release',
    'createdAt', p_created_at,
    'updatedAt', p_updated_at,
    'rows', jsonb_build_object(
      'escrow', 1, 'trustline', 1, 'roles', 1, 'status', 1,
      'milestones', ins_ms_count, 'milestone_flags', ins_ms_count,
      'configs', ins_cfg_count
    ),
    'totalAmount', jsonb_build_object(
      'raw', total_amount_raw,
      'tokens', (CASE WHEN p_trust_decimals IS NOT NULL
                      THEN total_amount_raw / power(10::numeric, p_trust_decimals)
                      ELSE NULL END)
    )
  );
END;
$$;


ALTER FUNCTION public.insert_multi_release_escrow_full(p_contract_id text, p_contract_base_id text, p_description text, p_engagement_id text, p_platform_fee integer, p_receiver_memo numeric, p_signer text, p_created_at timestamp with time zone, p_updated_at timestamp with time zone, p_trust_address text, p_trust_decimals smallint, p_trust_name text, p_trust_created_at timestamp with time zone, p_trust_updated_at timestamp with time zone, p_approver text, p_dispute_resolver text, p_platform_address text, p_receiver text, p_release_signer text, p_service_provider text, p_roles_created_at timestamp with time zone, p_roles_updated_at timestamp with time zone, p_is_actived boolean, p_status text, p_reason text, p_status_created_at timestamp with time zone, p_status_updated_at timestamp with time zone, p_milestones jsonb, p_configs jsonb) OWNER TO indexer;

--
-- TOC entry 234 (class 1255 OID 16511)
-- Name: insert_single_release_escrow_full(text, text, text, text, integer, numeric, text, numeric, numeric, timestamp with time zone, timestamp with time zone, text, smallint, text, timestamp with time zone, timestamp with time zone, text, text, text, text, text, text, timestamp with time zone, timestamp with time zone, boolean, text, text, timestamp with time zone, timestamp with time zone, boolean, boolean, boolean, timestamp with time zone, timestamp with time zone, jsonb, jsonb); Type: FUNCTION; Schema: public; Owner: indexer
--

CREATE FUNCTION public.insert_single_release_escrow_full(p_contract_id text, p_contract_base_id text, p_description text, p_engagement_id text, p_platform_fee integer, p_receiver_memo numeric, p_signer text, p_amount numeric, p_balance numeric, p_created_at timestamp with time zone, p_updated_at timestamp with time zone, p_trust_address text, p_trust_decimals smallint, p_trust_name text, p_trust_created_at timestamp with time zone, p_trust_updated_at timestamp with time zone, p_approver text, p_dispute_resolver text, p_platform_address text, p_receiver text, p_release_signer text, p_service_provider text, p_roles_created_at timestamp with time zone, p_roles_updated_at timestamp with time zone, p_is_actived boolean, p_status text, p_reason text, p_status_created_at timestamp with time zone, p_status_updated_at timestamp with time zone, p_disputed boolean, p_released boolean, p_resolved boolean, p_flags_created_at timestamp with time zone, p_flags_updated_at timestamp with time zone, p_milestones jsonb, p_configs jsonb DEFAULT NULL::jsonb) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  elem           JSONB;
  v_idx          INT;
  v_description  TEXT;
  v_status       TEXT;
  v_approved_at  TIMESTAMPTZ;
  v_created_at   TIMESTAMPTZ;
  v_updated_at   TIMESTAMPTZ;

  k              TEXT;
  v              JSONB;
  v_function     TEXT;
  v_params       JSONB;
  v_cron         TEXT;
  v_every        INTERVAL;
  v_enabled      BOOLEAN;
  v_c_created    TIMESTAMPTZ;
  v_c_updated    TIMESTAMPTZ;
BEGIN
  -- Validaciones mínimas
  IF p_platform_fee < 0 OR p_platform_fee > 10000 THEN
    RAISE EXCEPTION 'platform_fee fuera de rango (0..10000)';
  END IF;
  IF p_trust_decimals < 0 OR p_trust_decimals > 18 THEN
    RAISE EXCEPTION 'decimals fuera de rango (0..18)';
  END IF;
  IF EXISTS (SELECT 1 FROM single_release_escrow WHERE contract_id = p_contract_id) THEN
    RAISE EXCEPTION 'single_release_escrow ya existe para contract_id=%', p_contract_id;
  END IF;

  -- 1) single_release_escrow
  INSERT INTO single_release_escrow (
    contract_id, contract_base_id, description, engagement_id,
    platform_fee, receiver_memo, signer, amount, balance,
    created_at, updated_at
  ) VALUES (
    p_contract_id, p_contract_base_id, p_description, p_engagement_id,
    p_platform_fee, p_receiver_memo, p_signer, p_amount, p_balance,
    p_created_at, p_updated_at
  );

  -- 2) escrow_trustline
  INSERT INTO escrow_trustline (
    contract_id, address, decimals, name, created_at, updated_at
  ) VALUES (
    p_contract_id, p_trust_address, p_trust_decimals, p_trust_name,
    p_trust_created_at, p_trust_updated_at
  );

  -- 3) escrow_roles
  INSERT INTO escrow_roles (
    contract_id, approver, dispute_resolver, platform_address, receiver,
    release_signer, service_provider, created_at, updated_at
  ) VALUES (
    p_contract_id, p_approver, p_dispute_resolver, p_platform_address, p_receiver,
    p_release_signer, p_service_provider, p_roles_created_at, p_roles_updated_at
  );

  -- 4) escrow_status
  INSERT INTO escrow_status (
    contract_id, is_actived, status, reason, created_at, updated_at
  ) VALUES (
    p_contract_id, p_is_actived, p_status, p_reason, p_status_created_at, p_status_updated_at
  );

  -- 5) escrow_flags (single)
  INSERT INTO escrow_flags (
    contract_id, disputed, released, resolved, created_at, updated_at
  ) VALUES (
    p_contract_id, p_disputed, p_released, p_resolved, p_flags_created_at, p_flags_updated_at
  );

  -- 6) milestones (single)
  IF p_milestones IS NOT NULL THEN
    FOR elem IN SELECT * FROM jsonb_array_elements(p_milestones)
    LOOP
      v_idx         := (elem ->> 'milestone_index')::INT;
      v_description := (elem ->> 'description');
      v_status      := (elem ->> 'status');
      v_approved_at := NULLIF(elem ->> 'approved_at','')::timestamptz;
      v_created_at  := (elem ->> 'created_at')::timestamptz;
      v_updated_at  := (elem ->> 'updated_at')::timestamptz;

      IF v_idx IS NULL OR v_idx < 0 THEN
        RAISE EXCEPTION 'milestone_index inválido en p_milestones';
      END IF;

      INSERT INTO single_release_milestone (
        contract_id, milestone_index, description, status, approved_at, created_at, updated_at
      ) VALUES (
        p_contract_id, v_idx, v_description, v_status, v_approved_at, v_created_at, v_updated_at
      );
    END LOOP;
  END IF;

  -- 7) configs (opcional)
  IF p_configs IS NOT NULL AND jsonb_typeof(p_configs) = 'object' THEN
    FOR k, v IN SELECT * FROM jsonb_each(p_configs)
    LOOP
      v_function  := v ->> 'function_name';
      v_params    := COALESCE(v -> 'params', '{}'::jsonb);
      v_cron      := NULLIF(v ->> 'schedule_cron','');
      v_every     := NULLIF(v ->> 'schedule_every','')::interval;
      v_enabled   := COALESCE((v ->> 'enabled')::BOOLEAN, TRUE);
      v_c_created := (v ->> 'created_at')::timestamptz;
      v_c_updated := (v ->> 'updated_at')::timestamptz;

      IF v_function IS NULL THEN
        RAISE EXCEPTION 'configs[%]: function_name requerido', k;
      END IF;
      IF v_cron IS NULL AND v_every IS NULL THEN
        RAISE EXCEPTION 'configs[%]: requiere schedule_cron o schedule_every', k;
      END IF;

      INSERT INTO escrow_config (
        contract_id, key, function_name, params, schedule_cron, schedule_every,
        enabled, created_at, updated_at
      ) VALUES (
        p_contract_id, k, v_function, v_params, v_cron, v_every,
        v_enabled, v_c_created, v_c_updated
      );
    END LOOP;
  END IF;
END;
$$;


ALTER FUNCTION public.insert_single_release_escrow_full(p_contract_id text, p_contract_base_id text, p_description text, p_engagement_id text, p_platform_fee integer, p_receiver_memo numeric, p_signer text, p_amount numeric, p_balance numeric, p_created_at timestamp with time zone, p_updated_at timestamp with time zone, p_trust_address text, p_trust_decimals smallint, p_trust_name text, p_trust_created_at timestamp with time zone, p_trust_updated_at timestamp with time zone, p_approver text, p_dispute_resolver text, p_platform_address text, p_receiver text, p_release_signer text, p_service_provider text, p_roles_created_at timestamp with time zone, p_roles_updated_at timestamp with time zone, p_is_actived boolean, p_status text, p_reason text, p_status_created_at timestamp with time zone, p_status_updated_at timestamp with time zone, p_disputed boolean, p_released boolean, p_resolved boolean, p_flags_created_at timestamp with time zone, p_flags_updated_at timestamp with time zone, p_milestones jsonb, p_configs jsonb) OWNER TO indexer;

--
-- TOC entry 235 (class 1255 OID 16513)
-- Name: set_updated_at(); Type: FUNCTION; Schema: public; Owner: indexer
--

CREATE FUNCTION public.set_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at := now();
  RETURN NEW;
END; $$;


ALTER FUNCTION public.set_updated_at() OWNER TO indexer;

--
-- TOC entry 236 (class 1255 OID 16514)
-- Name: sp_delete_full_multi_release_escrow(text); Type: FUNCTION; Schema: public; Owner: indexer
--

CREATE FUNCTION public.sp_delete_full_multi_release_escrow(p_contract_id text) RETURNS jsonb
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_exists       BOOLEAN;

  c_configs      INT := 0;
  c_ms_flags     INT := 0;
  c_ms_multi     INT := 0;
  c_flags        INT := 0;  -- (multi no usa, pero por si existen restos)
  c_status       INT := 0;
  c_roles        INT := 0;
  c_trustline    INT := 0;
  c_escrow       INT := 0;
BEGIN
  -- ¿Existe el escrow multi?
  SELECT EXISTS(SELECT 1 FROM multi_release_escrow WHERE contract_id = p_contract_id)
  INTO v_exists;

  IF NOT v_exists THEN
    RETURN jsonb_build_object(
      'contractId', p_contract_id,
      'type', 'multi-release',
      'existed', FALSE,
      'deleted', jsonb_build_object(
        'escrow', 0, 'trustline', 0, 'roles', 0, 'status', 0, 'flags', 0,
        'milestones', 0, 'milestone_flags', 0, 'configs', 0
      )
    );
  END IF;

  -- 1) Configs
  DELETE FROM escrow_config WHERE contract_id = p_contract_id;
  GET DIAGNOSTICS c_configs = ROW_COUNT;

  -- 2) Milestone flags (multi)
  DELETE FROM escrow_milestone_flags WHERE contract_id = p_contract_id;
  GET DIAGNOSTICS c_ms_flags = ROW_COUNT;

  -- 3) Milestones (multi)
  DELETE FROM multi_release_milestone WHERE contract_id = p_contract_id;
  GET DIAGNOSTICS c_ms_multi = ROW_COUNT;

  -- 4) (por si existieran flags globales residuales)
  DELETE FROM escrow_flags WHERE contract_id = p_contract_id;
  GET DIAGNOSTICS c_flags = ROW_COUNT;

  -- 5) Status
  DELETE FROM escrow_status WHERE contract_id = p_contract_id;
  GET DIAGNOSTICS c_status = ROW_COUNT;

  -- 6) Roles
  DELETE FROM escrow_roles WHERE contract_id = p_contract_id;
  GET DIAGNOSTICS c_roles = ROW_COUNT;

  -- 7) Trustline
  DELETE FROM escrow_trustline WHERE contract_id = p_contract_id;
  GET DIAGNOSTICS c_trustline = ROW_COUNT;

  -- 8) Escrow (multi)
  DELETE FROM multi_release_escrow WHERE contract_id = p_contract_id;
  GET DIAGNOSTICS c_escrow = ROW_COUNT;

  RETURN jsonb_build_object(
    'contractId', p_contract_id,
    'type', 'multi-release',
    'existed', TRUE,
    'deleted', jsonb_build_object(
      'escrow', c_escrow,
      'trustline', c_trustline,
      'roles', c_roles,
      'status', c_status,
      'flags', c_flags,
      'milestones', c_ms_multi,
      'milestone_flags', c_ms_flags,
      'configs', c_configs
    )
  );
END;
$$;


ALTER FUNCTION public.sp_delete_full_multi_release_escrow(p_contract_id text) OWNER TO indexer;

--
-- TOC entry 248 (class 1255 OID 16515)
-- Name: sp_delete_full_single_release_escrow(text); Type: FUNCTION; Schema: public; Owner: indexer
--

CREATE FUNCTION public.sp_delete_full_single_release_escrow(p_contract_id text) RETURNS jsonb
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_exists       BOOLEAN;

  c_configs      INT := 0;
  c_ms_flags     INT := 0;  -- (single no usa, pero por si acaso)
  c_ms_single    INT := 0;
  c_flags        INT := 0;  -- escrow_flags (single)
  c_status       INT := 0;
  c_roles        INT := 0;
  c_trustline    INT := 0;
  c_escrow       INT := 0;
BEGIN
  -- ¿Existe el escrow single?
  SELECT EXISTS(SELECT 1 FROM single_release_escrow WHERE contract_id = p_contract_id)
  INTO v_exists;

  IF NOT v_exists THEN
    RETURN jsonb_build_object(
      'contractId', p_contract_id,
      'type', 'single-release',
      'existed', FALSE,
      'deleted', jsonb_build_object(
        'escrow', 0, 'trustline', 0, 'roles', 0, 'status', 0, 'flags', 0,
        'milestones', 0, 'milestone_flags', 0, 'configs', 0
      )
    );
  END IF;

  -- 1) Configs
  DELETE FROM escrow_config WHERE contract_id = p_contract_id;
  GET DIAGNOSTICS c_configs = ROW_COUNT;

  -- 2) (por si existen restos) milestone flags
  DELETE FROM escrow_milestone_flags WHERE contract_id = p_contract_id;
  GET DIAGNOSTICS c_ms_flags = ROW_COUNT;

  -- 3) Milestones (single)
  DELETE FROM single_release_milestone WHERE contract_id = p_contract_id;
  GET DIAGNOSTICS c_ms_single = ROW_COUNT;

  -- 4) Flags (single)
  DELETE FROM escrow_flags WHERE contract_id = p_contract_id;
  GET DIAGNOSTICS c_flags = ROW_COUNT;

  -- 5) Status
  DELETE FROM escrow_status WHERE contract_id = p_contract_id;
  GET DIAGNOSTICS c_status = ROW_COUNT;

  -- 6) Roles
  DELETE FROM escrow_roles WHERE contract_id = p_contract_id;
  GET DIAGNOSTICS c_roles = ROW_COUNT;

  -- 7) Trustline
  DELETE FROM escrow_trustline WHERE contract_id = p_contract_id;
  GET DIAGNOSTICS c_trustline = ROW_COUNT;

  -- 8) Escrow (single)
  DELETE FROM single_release_escrow WHERE contract_id = p_contract_id;
  GET DIAGNOSTICS c_escrow = ROW_COUNT;

  RETURN jsonb_build_object(
    'contractId', p_contract_id,
    'type', 'single-release',
    'existed', TRUE,
    'deleted', jsonb_build_object(
      'escrow', c_escrow,
      'trustline', c_trustline,
      'roles', c_roles,
      'status', c_status,
      'flags', c_flags,
      'milestones', c_ms_single,
      'milestone_flags', c_ms_flags,
      'configs', c_configs
    )
  );
END;
$$;


ALTER FUNCTION public.sp_delete_full_single_release_escrow(p_contract_id text) OWNER TO indexer;

--
-- TOC entry 249 (class 1255 OID 16516)
-- Name: sp_insert_funder_deposit(text, text, numeric, timestamp with time zone, text, text, bigint, integer, jsonb); Type: FUNCTION; Schema: public; Owner: indexer
--

CREATE FUNCTION public.sp_insert_funder_deposit(p_contract_id text, p_depositor text, p_amount_raw numeric, p_occurred_at timestamp with time zone, p_external_id text DEFAULT NULL::text, p_tx_hash text DEFAULT NULL::text, p_ledger_sequence bigint DEFAULT NULL::bigint, p_op_index integer DEFAULT NULL::integer, p_metadata jsonb DEFAULT '{}'::jsonb) RETURNS jsonb
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_action   TEXT;
  v_id       BIGINT;
BEGIN
  IF p_amount_raw IS NULL OR p_amount_raw <= 0 THEN
    RAISE EXCEPTION 'amount_raw inválido';
  END IF;

  -- UPSERT por (contract_id, external_id) si external_id no es NULL
  INSERT INTO escrow_funder_deposits (
    contract_id, depositor, amount_raw, occurred_at,
    external_id, tx_hash, ledger_sequence, op_index, metadata
  ) VALUES (
    p_contract_id, p_depositor, p_amount_raw, p_occurred_at,
    p_external_id, p_tx_hash, p_ledger_sequence, p_op_index, p_metadata
  )
  ON CONFLICT (contract_id, external_id) WHERE external_id IS NOT NULL
  DO UPDATE SET
    depositor       = EXCLUDED.depositor,
    amount_raw      = EXCLUDED.amount_raw,
    occurred_at     = EXCLUDED.occurred_at,
    tx_hash         = COALESCE(EXCLUDED.tx_hash, escrow_funder_deposits.tx_hash),
    ledger_sequence = COALESCE(EXCLUDED.ledger_sequence, escrow_funder_deposits.ledger_sequence),
    op_index        = COALESCE(EXCLUDED.op_index, escrow_funder_deposits.op_index),
    metadata        = escrow_funder_deposits.metadata || EXCLUDED.metadata,
    updated_at      = now()
  RETURNING id,
            CASE WHEN xmax = 0 THEN 'inserted' ELSE 'updated' END AS action
  INTO v_id, v_action;

  RETURN jsonb_build_object(
    'action',     v_action,
    'id',         v_id,
    'contractId', p_contract_id,
    'depositor',  p_depositor,
    'amount',     jsonb_build_object(
                    'raw',    p_amount_raw,
                    -- tokens: se pueden calcular en SELECT uniendo la trustline
                    'tokens', NULL
                  ),
    'occurredAt', p_occurred_at,
    'externalId', p_external_id,
    'txHash',     p_tx_hash,
    'ledger',     p_ledger_sequence,
    'opIndex',    p_op_index
  );
END;
$$;


ALTER FUNCTION public.sp_insert_funder_deposit(p_contract_id text, p_depositor text, p_amount_raw numeric, p_occurred_at timestamp with time zone, p_external_id text, p_tx_hash text, p_ledger_sequence bigint, p_op_index integer, p_metadata jsonb) OWNER TO indexer;

--
-- TOC entry 250 (class 1255 OID 16517)
-- Name: sp_insert_multi_release(text, text, text, text, integer, numeric, text, timestamp with time zone, timestamp with time zone, text, smallint, text, timestamp with time zone, timestamp with time zone, text, text, text, text, text, text, timestamp with time zone, timestamp with time zone, boolean, text, text, timestamp with time zone, timestamp with time zone, jsonb, jsonb); Type: FUNCTION; Schema: public; Owner: indexer
--

CREATE FUNCTION public.sp_insert_multi_release(p_contract_id text, p_contract_base_id text, p_description text, p_engagement_id text, p_platform_fee integer, p_receiver_memo numeric, p_signer text, p_created_at timestamp with time zone, p_updated_at timestamp with time zone, p_trust_address text, p_trust_decimals smallint, p_trust_name text, p_trust_created_at timestamp with time zone, p_trust_updated_at timestamp with time zone, p_approver text, p_dispute_resolver text, p_platform_address text, p_receiver text, p_release_signer text, p_service_provider text, p_roles_created_at timestamp with time zone, p_roles_updated_at timestamp with time zone, p_is_actived boolean, p_status text, p_reason text, p_status_created_at timestamp with time zone, p_status_updated_at timestamp with time zone, p_milestones jsonb DEFAULT '[]'::jsonb, p_configs jsonb DEFAULT NULL::jsonb) RETURNS jsonb
    LANGUAGE plpgsql
    AS $$
DECLARE
  m                JSONB;
  v_idx            INT;
  v_amount         NUMERIC(39,0);
  v_balance        NUMERIC(39,0);
  v_desc           TEXT;
  v_status         TEXT;
  v_appr_at        TIMESTAMPTZ;
  v_m_cr           TIMESTAMPTZ;
  v_m_up           TIMESTAMPTZ;

  v_flags          JSONB;
  v_approved_b     BOOLEAN;
  v_disputed_b     BOOLEAN;
  v_released_b     BOOLEAN;
  v_resolved_b     BOOLEAN;

  k                TEXT;
  v                JSONB;

  ins_ms_count     INT := 0;
  ins_cfg_count    INT := 0;
  total_amount_raw NUMERIC(39,0) := 0;
BEGIN
  IF p_platform_fee < 0 OR p_platform_fee > 10000 THEN
    RAISE EXCEPTION 'platform_fee fuera de rango (0..10000)';
  END IF;
  IF p_trust_decimals < 0 OR p_trust_decimals > 18 THEN
    RAISE EXCEPTION 'decimals fuera de rango (0..18)';
  END IF;
  IF EXISTS (SELECT 1 FROM multi_release_escrow WHERE contract_id = p_contract_id) THEN
    RAISE EXCEPTION 'multi_release_escrow ya existe para %', p_contract_id;
  END IF;

  INSERT INTO multi_release_escrow(
    contract_id, contract_base_id, description, engagement_id,
    platform_fee, receiver_memo, signer, created_at, updated_at
  ) VALUES (
    p_contract_id, p_contract_base_id, p_description, p_engagement_id,
    p_platform_fee, p_receiver_memo, p_signer, p_created_at, p_updated_at
  );

  INSERT INTO escrow_trustline(contract_id, address, decimals, name, created_at, updated_at)
  VALUES (p_contract_id, p_trust_address, p_trust_decimals, p_trust_name, p_trust_created_at, p_trust_updated_at);

  INSERT INTO escrow_roles(
    contract_id, approver, dispute_resolver, platform_address, receiver,
    release_signer, service_provider, created_at, updated_at
  ) VALUES (
    p_contract_id, p_approver, p_dispute_resolver, p_platform_address, p_receiver,
    p_release_signer, p_service_provider, p_roles_created_at, p_roles_updated_at
  );

  INSERT INTO escrow_status(contract_id, is_actived, status, reason, created_at, updated_at)
  VALUES (p_contract_id, p_is_actived, p_status, p_reason, p_status_created_at, p_status_updated_at);

  IF p_milestones IS NOT NULL AND jsonb_typeof(p_milestones) = 'array' THEN
    FOR m IN SELECT * FROM jsonb_array_elements(p_milestones)
    LOOP
      v_idx     := (m ->> 'milestone_index')::INT;
      v_amount  := (m ->> 'amount')::NUMERIC;
      v_balance := NULLIF(m ->> 'balance','')::NUMERIC;
      v_desc    := (m ->> 'description');
      v_status  := (m ->> 'status');
      v_appr_at := NULLIF(m ->> 'approved_at','')::timestamptz;
      v_m_cr    := (m ->> 'created_at')::timestamptz;
      v_m_up    := (m ->> 'updated_at')::timestamptz;

      IF v_idx IS NULL OR v_idx < 0 THEN
        RAISE EXCEPTION 'milestone_index inválido';
      END IF;
      IF v_amount IS NULL OR v_amount <= 0 THEN
        RAISE EXCEPTION 'amount inválido en milestone %', v_idx;
      END IF;

      INSERT INTO multi_release_milestone(
        contract_id, milestone_index, amount, balance, description, status,
        approved_at, created_at, updated_at
      ) VALUES (
        p_contract_id, v_idx, v_amount, COALESCE(v_balance, v_amount),
        v_desc, v_status, v_appr_at, v_m_cr, v_m_up
      );
      ins_ms_count := ins_ms_count + 1;
      total_amount_raw := total_amount_raw + v_amount;

      v_flags        := m -> 'flags';
      v_approved_b   := COALESCE((v_flags ->> 'approved')::BOOLEAN, FALSE);
      v_disputed_b   := COALESCE((v_flags ->> 'disputed')::BOOLEAN, FALSE);
      v_released_b   := COALESCE((v_flags ->> 'released')::BOOLEAN, FALSE);
      v_resolved_b   := COALESCE((v_flags ->> 'resolved')::BOOLEAN, FALSE);

      INSERT INTO escrow_milestone_flags(
        contract_id, milestone_index, approved, disputed, released, resolved,
        created_at, updated_at
      ) VALUES (
        p_contract_id, v_idx, v_approved_b, v_disputed_b, v_released_b, v_resolved_b,
        v_m_cr, v_m_up
      );
    END LOOP;
  END IF;

  IF p_configs IS NOT NULL AND jsonb_typeof(p_configs) = 'object' THEN
    FOR k, v IN SELECT * FROM jsonb_each(p_configs)
    LOOP
      IF (v ->> 'function_name') IS NULL THEN
        RAISE EXCEPTION 'configs[%]: function_name requerido', k;
      END IF;
      IF NULLIF(v ->> 'schedule_cron','') IS NULL
         AND NULLIF(v ->> 'schedule_every','') IS NULL THEN
        RAISE EXCEPTION 'configs[%]: requiere schedule_cron o schedule_every', k;
      END IF;

      INSERT INTO escrow_config(
        contract_id, key, function_name, params, schedule_cron, schedule_every,
        enabled, created_at, updated_at
      ) VALUES (
        p_contract_id,
        k,
        (v ->> 'function_name'),
        COALESCE(v -> 'params', '{}'::jsonb),
        NULLIF(v ->> 'schedule_cron',''),
        NULLIF(v ->> 'schedule_every','')::interval,
        COALESCE((v ->> 'enabled')::BOOLEAN, TRUE),
        (v ->> 'created_at')::timestamptz,
        (v ->> 'updated_at')::timestamptz
      );
      ins_cfg_count := ins_cfg_count + 1;
    END LOOP;
  END IF;

  RETURN jsonb_build_object(
    'contractId', p_contract_id,
    'type', 'multi-release',
    'createdAt', p_created_at,
    'updatedAt', p_updated_at,
    'rows', jsonb_build_object(
      'escrow', 1, 'trustline', 1, 'roles', 1, 'status', 1,
      'milestones', ins_ms_count, 'milestone_flags', ins_ms_count,
      'configs', ins_cfg_count
    ),
    'totalAmount', jsonb_build_object(
      'raw', total_amount_raw,
      'tokens', (total_amount_raw / power(10::numeric, p_trust_decimals))
    )
  );
END;
$$;


ALTER FUNCTION public.sp_insert_multi_release(p_contract_id text, p_contract_base_id text, p_description text, p_engagement_id text, p_platform_fee integer, p_receiver_memo numeric, p_signer text, p_created_at timestamp with time zone, p_updated_at timestamp with time zone, p_trust_address text, p_trust_decimals smallint, p_trust_name text, p_trust_created_at timestamp with time zone, p_trust_updated_at timestamp with time zone, p_approver text, p_dispute_resolver text, p_platform_address text, p_receiver text, p_release_signer text, p_service_provider text, p_roles_created_at timestamp with time zone, p_roles_updated_at timestamp with time zone, p_is_actived boolean, p_status text, p_reason text, p_status_created_at timestamp with time zone, p_status_updated_at timestamp with time zone, p_milestones jsonb, p_configs jsonb) OWNER TO indexer;

--
-- TOC entry 251 (class 1255 OID 16519)
-- Name: sp_insert_single_release(text, text, text, text, integer, numeric, text, numeric, numeric, timestamp with time zone, timestamp with time zone, text, smallint, text, timestamp with time zone, timestamp with time zone, text, text, text, text, text, text, timestamp with time zone, timestamp with time zone, boolean, text, text, timestamp with time zone, timestamp with time zone, boolean, boolean, boolean, timestamp with time zone, timestamp with time zone, jsonb, jsonb); Type: FUNCTION; Schema: public; Owner: indexer
--

CREATE FUNCTION public.sp_insert_single_release(p_contract_id text, p_contract_base_id text, p_description text, p_engagement_id text, p_platform_fee integer, p_receiver_memo numeric, p_signer text, p_amount numeric, p_balance numeric, p_created_at timestamp with time zone, p_updated_at timestamp with time zone, p_trust_address text, p_trust_decimals smallint, p_trust_name text, p_trust_created_at timestamp with time zone, p_trust_updated_at timestamp with time zone, p_approver text, p_dispute_resolver text, p_platform_address text, p_receiver text, p_release_signer text, p_service_provider text, p_roles_created_at timestamp with time zone, p_roles_updated_at timestamp with time zone, p_is_actived boolean, p_status text, p_reason text, p_status_created_at timestamp with time zone, p_status_updated_at timestamp with time zone, p_disputed boolean, p_released boolean, p_resolved boolean, p_flags_created_at timestamp with time zone, p_flags_updated_at timestamp with time zone, p_milestones jsonb DEFAULT '[]'::jsonb, p_configs jsonb DEFAULT NULL::jsonb) RETURNS jsonb
    LANGUAGE plpgsql
    AS $$
DECLARE
  m           JSONB;
  v_idx       INT;
  v_desc      TEXT;
  v_status    TEXT;
  v_appr_at   TIMESTAMPTZ;
  v_m_cr      TIMESTAMPTZ;
  v_m_up      TIMESTAMPTZ;

  k           TEXT;
  v           JSONB;

  ins_ms_count  INT := 0;
  ins_cfg_count INT := 0;
BEGIN
  IF p_platform_fee < 0 OR p_platform_fee > 10000 THEN
    RAISE EXCEPTION 'platform_fee fuera de rango (0..10000)';
  END IF;
  IF p_trust_decimals < 0 OR p_trust_decimals > 18 THEN
    RAISE EXCEPTION 'decimals fuera de rango (0..18)';
  END IF;
  IF EXISTS (SELECT 1 FROM single_release_escrow WHERE contract_id = p_contract_id) THEN
    RAISE EXCEPTION 'single_release_escrow ya existe para %', p_contract_id;
  END IF;

  INSERT INTO single_release_escrow(
    contract_id, contract_base_id, description, engagement_id,
    platform_fee, receiver_memo, signer, amount, balance,
    created_at, updated_at
  ) VALUES (
    p_contract_id, p_contract_base_id, p_description, p_engagement_id,
    p_platform_fee, p_receiver_memo, p_signer, p_amount, p_balance,
    p_created_at, p_updated_at
  );

  INSERT INTO escrow_trustline(contract_id, address, decimals, name, created_at, updated_at)
  VALUES (p_contract_id, p_trust_address, p_trust_decimals, p_trust_name, p_trust_created_at, p_trust_updated_at);

  INSERT INTO escrow_roles(
    contract_id, approver, dispute_resolver, platform_address, receiver,
    release_signer, service_provider, created_at, updated_at
  ) VALUES (
    p_contract_id, p_approver, p_dispute_resolver, p_platform_address, p_receiver,
    p_release_signer, p_service_provider, p_roles_created_at, p_roles_updated_at
  );

  INSERT INTO escrow_status(contract_id, is_actived, status, reason, created_at, updated_at)
  VALUES (p_contract_id, p_is_actived, p_status, p_reason, p_status_created_at, p_status_updated_at);

  INSERT INTO escrow_flags(contract_id, disputed, released, resolved, created_at, updated_at)
  VALUES (p_contract_id, p_disputed, p_released, p_resolved, p_flags_created_at, p_flags_updated_at);

  IF p_milestones IS NOT NULL AND jsonb_typeof(p_milestones) = 'array' THEN
    FOR m IN SELECT * FROM jsonb_array_elements(p_milestones)
    LOOP
      v_idx     := (m ->> 'milestone_index')::INT;
      v_desc    := (m ->> 'description');
      v_status  := (m ->> 'status');
      v_appr_at := NULLIF(m ->> 'approved_at','')::timestamptz;
      v_m_cr    := (m ->> 'created_at')::timestamptz;
      v_m_up    := (m ->> 'updated_at')::timestamptz;

      IF v_idx IS NULL OR v_idx < 0 THEN
        RAISE EXCEPTION 'milestone_index inválido';
      END IF;

      INSERT INTO single_release_milestone(
        contract_id, milestone_index, description, status, approved_at, created_at, updated_at
      ) VALUES (
        p_contract_id, v_idx, v_desc, v_status, v_appr_at, v_m_cr, v_m_up
      );
      ins_ms_count := ins_ms_count + 1;
    END LOOP;
  END IF;

  IF p_configs IS NOT NULL AND jsonb_typeof(p_configs) = 'object' THEN
    FOR k, v IN SELECT * FROM jsonb_each(p_configs)
    LOOP
      IF (v ->> 'function_name') IS NULL THEN
        RAISE EXCEPTION 'configs[%]: function_name requerido', k;
      END IF;
      IF NULLIF(v ->> 'schedule_cron','') IS NULL
         AND NULLIF(v ->> 'schedule_every','') IS NULL THEN
        RAISE EXCEPTION 'configs[%]: requiere schedule_cron o schedule_every', k;
      END IF;

      INSERT INTO escrow_config(
        contract_id, key, function_name, params, schedule_cron, schedule_every,
        enabled, created_at, updated_at
      ) VALUES (
        p_contract_id,
        k,
        (v ->> 'function_name'),
        COALESCE(v -> 'params', '{}'::jsonb),
        NULLIF(v ->> 'schedule_cron',''),
        NULLIF(v ->> 'schedule_every','')::interval,
        COALESCE((v ->> 'enabled')::BOOLEAN, TRUE),
        (v ->> 'created_at')::timestamptz,
        (v ->> 'updated_at')::timestamptz
      );
      ins_cfg_count := ins_cfg_count + 1;
    END LOOP;
  END IF;

  RETURN jsonb_build_object(
    'contractId', p_contract_id,
    'type', 'single-release',
    'createdAt', p_created_at,
    'updatedAt', p_updated_at,
    'rows', jsonb_build_object(
      'escrow', 1, 'trustline', 1, 'roles', 1, 'status', 1, 'flags', 1,
      'milestones', ins_ms_count, 'configs', ins_cfg_count
    ),
    'amount',  jsonb_build_object(
      'raw', p_amount,
      'tokens', (p_amount / power(10::numeric, p_trust_decimals))
    ),
    'balance', jsonb_build_object(
      'raw', p_balance,
      'tokens', (p_balance / power(10::numeric, p_trust_decimals))
    )
  );
END;
$$;


ALTER FUNCTION public.sp_insert_single_release(p_contract_id text, p_contract_base_id text, p_description text, p_engagement_id text, p_platform_fee integer, p_receiver_memo numeric, p_signer text, p_amount numeric, p_balance numeric, p_created_at timestamp with time zone, p_updated_at timestamp with time zone, p_trust_address text, p_trust_decimals smallint, p_trust_name text, p_trust_created_at timestamp with time zone, p_trust_updated_at timestamp with time zone, p_approver text, p_dispute_resolver text, p_platform_address text, p_receiver text, p_release_signer text, p_service_provider text, p_roles_created_at timestamp with time zone, p_roles_updated_at timestamp with time zone, p_is_actived boolean, p_status text, p_reason text, p_status_created_at timestamp with time zone, p_status_updated_at timestamp with time zone, p_disputed boolean, p_released boolean, p_resolved boolean, p_flags_created_at timestamp with time zone, p_flags_updated_at timestamp with time zone, p_milestones jsonb, p_configs jsonb) OWNER TO indexer;

--
-- TOC entry 252 (class 1255 OID 16521)
-- Name: sp_select_multi_release(text); Type: FUNCTION; Schema: public; Owner: indexer
--

CREATE FUNCTION public.sp_select_multi_release(p_contract_id text) RETURNS jsonb
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_found        BOOLEAN;
  -- base
  v_contract_base_id  TEXT;
  v_description       TEXT;
  v_engagement_id     TEXT;
  v_platform_fee      INTEGER;
  v_receiver_memo     NUMERIC(20,0);
  v_signer            TEXT;
  v_created_at        TIMESTAMPTZ;
  v_updated_at        TIMESTAMPTZ;

  -- trustline
  v_trust_address     TEXT;
  v_trust_decimals    SMALLINT;
  v_trust_name        TEXT;
  v_trust_created_at  TIMESTAMPTZ;
  v_trust_updated_at  TIMESTAMPTZ;

  -- roles/status
  v_roles_json        JSONB := '{}'::jsonb;
  v_status_json       JSONB := '{}'::jsonb;

  -- milestones/configs
  v_milestones_json   JSONB := '[]'::jsonb;
  v_configs_json      JSONB := '{}'::jsonb;

  -- totales
  v_total_amount_raw  NUMERIC(39,0) := 0;
  v_total_amount_tok  NUMERIC;
BEGIN
  -- ¿Existe?
  SELECT EXISTS(SELECT 1 FROM multi_release_escrow WHERE contract_id = p_contract_id)
  INTO v_found;

  IF NOT v_found THEN
    RETURN jsonb_build_object(
      'contractId', p_contract_id,
      'type', 'multi-release',
      'found', FALSE
    );
  END IF;

  -- Base
  SELECT contract_base_id, description, engagement_id, platform_fee,
         receiver_memo, signer, created_at, updated_at
  INTO   v_contract_base_id, v_description, v_engagement_id, v_platform_fee,
         v_receiver_memo, v_signer, v_created_at, v_updated_at
  FROM multi_release_escrow
  WHERE contract_id = p_contract_id;

  -- Trustline
  SELECT address, decimals, name, created_at, updated_at
  INTO   v_trust_address, v_trust_decimals, v_trust_name, v_trust_created_at, v_trust_updated_at
  FROM escrow_trustline
  WHERE contract_id = p_contract_id;

  -- Roles
  SELECT jsonb_build_object(
           'approver',          approver,
           'disputeResolver',   dispute_resolver,
           'platformAddress',   platform_address,
           'receiver',          receiver,
           'releaseSigner',     release_signer,
           'serviceProvider',   service_provider,
           'createdAt',         created_at,
           'updatedAt',         updated_at
         )
  INTO v_roles_json
  FROM escrow_roles
  WHERE contract_id = p_contract_id;

  -- Status
  SELECT jsonb_build_object(
           'isActive',  is_actived,
           'status',    status,
           'reason',    reason,
           'createdAt', created_at,
           'updatedAt', updated_at
         )
  INTO v_status_json
  FROM escrow_status
  WHERE contract_id = p_contract_id;

  -- Milestones + flags
  SELECT COALESCE(
           jsonb_agg(
             jsonb_build_object(
               'milestone_index', m.milestone_index,
               'amount',          m.amount,
               'balance',         m.balance,
               'description',     m.description,
               'status',          m.status,
               'approvedAt',      m.approved_at,
               'createdAt',       m.created_at,
               'updatedAt',       m.updated_at,
               'flags',           jsonb_build_object(
                                    'approved', COALESCE(f.approved,false),
                                    'disputed', COALESCE(f.disputed,false),
                                    'released', COALESCE(f.released,false),
                                    'resolved', COALESCE(f.resolved,false),
                                    'createdAt', f.created_at,
                                    'updatedAt', f.updated_at
                                  )
             )
             ORDER BY m.milestone_index
           ),
           '[]'::jsonb
         ),
         COALESCE(SUM(m.amount), 0)
  INTO v_milestones_json, v_total_amount_raw
  FROM multi_release_milestone m
  LEFT JOIN escrow_milestone_flags f
    ON f.contract_id = m.contract_id AND f.milestone_index = m.milestone_index
  WHERE m.contract_id = p_contract_id;

  -- Configs → objeto por clave
  SELECT COALESCE(
           jsonb_object_agg(
             key,
             jsonb_build_object(
               'function_name', function_name,
               'params',        params,
               'schedule_cron', schedule_cron,
               'schedule_every', (schedule_every)::text,
               'enabled',       enabled,
               'created_at',    created_at,
               'updated_at',    updated_at
             )
           ),
           '{}'::jsonb
         )
  INTO v_configs_json
  FROM escrow_config
  WHERE contract_id = p_contract_id;

  -- Total tokens
  IF v_trust_decimals IS NOT NULL THEN
    v_total_amount_tok := v_total_amount_raw / power(10::numeric, v_trust_decimals);
  END IF;

  RETURN jsonb_build_object(
    'contractId',      p_contract_id,
    'type',            'multi-release',
    'found',           TRUE,
    'contractBaseId',  v_contract_base_id,
    'description',     v_description,
    'engagementId',    v_engagement_id,
    'platformFee',     v_platform_fee,
    'receiverMemo',    v_receiver_memo,
    'signer',          v_signer,
    'createdAt',       v_created_at,
    'updatedAt',       v_updated_at,
    'trustline', jsonb_build_object(
      'address',     v_trust_address,
      'decimals',    v_trust_decimals,
      'name',        v_trust_name,
      'createdAt',   v_trust_created_at,
      'updatedAt',   v_trust_updated_at
    ),
    'roles',      COALESCE(v_roles_json, '{}'::jsonb),
    'status',     COALESCE(v_status_json, '{}'::jsonb),
    'milestones', COALESCE(v_milestones_json, '[]'::jsonb),
    'configs',    COALESCE(v_configs_json,    '{}'::jsonb),
    'totalAmount', jsonb_build_object('raw', v_total_amount_raw, 'tokens', v_total_amount_tok)
  );
END;
$$;


ALTER FUNCTION public.sp_select_multi_release(p_contract_id text) OWNER TO indexer;

--
-- TOC entry 253 (class 1255 OID 16522)
-- Name: sp_select_single_release(text); Type: FUNCTION; Schema: public; Owner: indexer
--

CREATE FUNCTION public.sp_select_single_release(p_contract_id text) RETURNS jsonb
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_found        BOOLEAN;
  -- base
  v_contract_base_id  TEXT;
  v_description       TEXT;
  v_engagement_id     TEXT;
  v_platform_fee      INTEGER;
  v_receiver_memo     NUMERIC(20,0);
  v_signer            TEXT;
  v_amount_raw        NUMERIC(39,0);
  v_balance_raw       NUMERIC(39,0);
  v_created_at        TIMESTAMPTZ;
  v_updated_at        TIMESTAMPTZ;

  -- trustline
  v_trust_address     TEXT;
  v_trust_decimals    SMALLINT;
  v_trust_name        TEXT;
  v_trust_created_at  TIMESTAMPTZ;
  v_trust_updated_at  TIMESTAMPTZ;

  -- roles/status/flags
  v_roles_json        JSONB := '{}'::jsonb;
  v_status_json       JSONB := '{}'::jsonb;
  v_flags_json        JSONB := '{}'::jsonb;

  -- milestones/configs
  v_milestones_json   JSONB := '[]'::jsonb;
  v_configs_json      JSONB := '{}'::jsonb;

  -- derivados
  v_amount_tokens     NUMERIC;
  v_balance_tokens    NUMERIC;
BEGIN
  -- ¿Existe?
  SELECT EXISTS(SELECT 1 FROM single_release_escrow WHERE contract_id = p_contract_id)
  INTO v_found;

  IF NOT v_found THEN
    RETURN jsonb_build_object(
      'contractId', p_contract_id,
      'type', 'single-release',
      'found', FALSE
    );
  END IF;

  -- Base
  SELECT contract_base_id, description, engagement_id, platform_fee,
         receiver_memo, signer, amount, balance, created_at, updated_at
  INTO   v_contract_base_id, v_description, v_engagement_id, v_platform_fee,
         v_receiver_memo, v_signer, v_amount_raw, v_balance_raw, v_created_at, v_updated_at
  FROM single_release_escrow
  WHERE contract_id = p_contract_id;

  -- Trustline
  SELECT address, decimals, name, created_at, updated_at
  INTO   v_trust_address, v_trust_decimals, v_trust_name, v_trust_created_at, v_trust_updated_at
  FROM escrow_trustline
  WHERE contract_id = p_contract_id;

  -- Roles
  SELECT jsonb_build_object(
           'approver',          approver,
           'disputeResolver',   dispute_resolver,
           'platformAddress',   platform_address,
           'receiver',          receiver,
           'releaseSigner',     release_signer,
           'serviceProvider',   service_provider,
           'createdAt',         created_at,
           'updatedAt',         updated_at
         )
  INTO v_roles_json
  FROM escrow_roles
  WHERE contract_id = p_contract_id;

  -- Status
  SELECT jsonb_build_object(
           'isActive',  is_actived,
           'status',    status,
           'reason',    reason,
           'createdAt', created_at,
           'updatedAt', updated_at
         )
  INTO v_status_json
  FROM escrow_status
  WHERE contract_id = p_contract_id;

  -- Flags (single)
  SELECT jsonb_build_object(
           'disputed',  COALESCE(disputed,false),
           'released',  COALESCE(released,false),
           'resolved',  COALESCE(resolved,false),
           'createdAt', created_at,
           'updatedAt', updated_at
         )
  INTO v_flags_json
  FROM escrow_flags
  WHERE contract_id = p_contract_id;

  -- Milestones (single)
  SELECT COALESCE(
           jsonb_agg(
             jsonb_build_object(
               'milestone_index', milestone_index,
               'description',     description,
               'status',          status,
               'approvedAt',      approved_at,
               'createdAt',       created_at,
               'updatedAt',       updated_at
             )
             ORDER BY milestone_index
           ),
           '[]'::jsonb
         )
  INTO v_milestones_json
  FROM single_release_milestone
  WHERE contract_id = p_contract_id;

  -- Configs → objeto por clave
  SELECT COALESCE(
           jsonb_object_agg(
             key,
             jsonb_build_object(
               'function_name', function_name,
               'params',        params,
               'schedule_cron', schedule_cron,
               'schedule_every', (schedule_every)::text,
               'enabled',       enabled,
               'created_at',    created_at,
               'updated_at',    updated_at
             )
           ),
           '{}'::jsonb
         )
  INTO v_configs_json
  FROM escrow_config
  WHERE contract_id = p_contract_id;

  -- Tokens derivados
  IF v_trust_decimals IS NOT NULL THEN
    v_amount_tokens  := v_amount_raw  / power(10::numeric, v_trust_decimals);
    v_balance_tokens := v_balance_raw / power(10::numeric, v_trust_decimals);
  END IF;

  RETURN jsonb_build_object(
    'contractId',      p_contract_id,
    'type',            'single-release',
    'found',           TRUE,
    'contractBaseId',  v_contract_base_id,
    'description',     v_description,
    'engagementId',    v_engagement_id,
    'platformFee',     v_platform_fee,
    'receiverMemo',    v_receiver_memo,
    'signer',          v_signer,
    'amount', jsonb_build_object('raw', v_amount_raw,  'tokens', v_amount_tokens),
    'balance',jsonb_build_object('raw', v_balance_raw, 'tokens', v_balance_tokens),
    'createdAt',       v_created_at,
    'updatedAt',       v_updated_at,
    'trustline', jsonb_build_object(
      'address',     v_trust_address,
      'decimals',    v_trust_decimals,
      'name',        v_trust_name,
      'createdAt',   v_trust_created_at,
      'updatedAt',   v_trust_updated_at
    ),
    'roles',      COALESCE(v_roles_json, '{}'::jsonb),
    'status',     COALESCE(v_status_json, '{}'::jsonb),
    'flags',      COALESCE(v_flags_json,  '{}'::jsonb),
    'milestones', COALESCE(v_milestones_json, '[]'::jsonb),
    'configs',    COALESCE(v_configs_json,    '{}'::jsonb)
  );
END;
$$;


ALTER FUNCTION public.sp_select_single_release(p_contract_id text) OWNER TO indexer;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- TOC entry 214 (class 1259 OID 16523)
-- Name: escrow_config; Type: TABLE; Schema: public; Owner: indexer
--

CREATE TABLE public.escrow_config (
    contract_id text NOT NULL,
    key text NOT NULL,
    function_name text NOT NULL,
    params jsonb DEFAULT '{}'::jsonb NOT NULL,
    schedule_cron text,
    schedule_every interval,
    enabled boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT chk_schedule_present CHECK (((schedule_cron IS NOT NULL) OR (schedule_every IS NOT NULL)))
);


ALTER TABLE public.escrow_config OWNER TO indexer;

--
-- TOC entry 215 (class 1259 OID 16531)
-- Name: escrow_deposits; Type: TABLE; Schema: public; Owner: indexer
--

CREATE TABLE public.escrow_deposits (
    id bigint NOT NULL,
    escrow_id bigint,
    from_address text NOT NULL,
    amount numeric(38,0) NOT NULL,
    tx_hash text NOT NULL,
    ledger bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.escrow_deposits OWNER TO indexer;

--
-- TOC entry 216 (class 1259 OID 16537)
-- Name: escrow_deposits_id_seq; Type: SEQUENCE; Schema: public; Owner: indexer
--

CREATE SEQUENCE public.escrow_deposits_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.escrow_deposits_id_seq OWNER TO indexer;

--
-- TOC entry 3583 (class 0 OID 0)
-- Dependencies: 216
-- Name: escrow_deposits_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: indexer
--

ALTER SEQUENCE public.escrow_deposits_id_seq OWNED BY public.escrow_deposits.id;


--
-- TOC entry 217 (class 1259 OID 16538)
-- Name: escrow_events; Type: TABLE; Schema: public; Owner: indexer
--

CREATE TABLE public.escrow_events (
    id bigint NOT NULL,
    contract_id text NOT NULL,
    escrow_id bigint,
    event_type text NOT NULL,
    event_version integer DEFAULT 1 NOT NULL,
    ledger bigint NOT NULL,
    tx_hash text NOT NULL,
    event_index integer NOT NULL,
    topic0 text,
    payload jsonb NOT NULL,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.escrow_events OWNER TO indexer;

--
-- TOC entry 218 (class 1259 OID 16545)
-- Name: escrow_events_id_seq; Type: SEQUENCE; Schema: public; Owner: indexer
--

CREATE SEQUENCE public.escrow_events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.escrow_events_id_seq OWNER TO indexer;

--
-- TOC entry 3584 (class 0 OID 0)
-- Dependencies: 218
-- Name: escrow_events_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: indexer
--

ALTER SEQUENCE public.escrow_events_id_seq OWNED BY public.escrow_events.id;


--
-- TOC entry 219 (class 1259 OID 16546)
-- Name: escrow_flags; Type: TABLE; Schema: public; Owner: indexer
--

CREATE TABLE public.escrow_flags (
    contract_id text NOT NULL,
    disputed boolean DEFAULT false NOT NULL,
    released boolean DEFAULT false NOT NULL,
    resolved boolean DEFAULT false NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL
);


ALTER TABLE public.escrow_flags OWNER TO indexer;

--
-- TOC entry 220 (class 1259 OID 16554)
-- Name: escrow_funder_deposits; Type: TABLE; Schema: public; Owner: indexer
--

CREATE TABLE public.escrow_funder_deposits (
    id bigint NOT NULL,
    contract_id text NOT NULL,
    depositor text NOT NULL,
    amount_raw numeric(39,0) NOT NULL,
    occurred_at timestamp with time zone NOT NULL,
    external_id text,
    tx_hash text,
    ledger_sequence bigint,
    op_index integer,
    metadata jsonb DEFAULT '{}'::jsonb NOT NULL,
    ingested_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.escrow_funder_deposits OWNER TO indexer;

--
-- TOC entry 221 (class 1259 OID 16562)
-- Name: escrow_funder_deposits_id_seq; Type: SEQUENCE; Schema: public; Owner: indexer
--

CREATE SEQUENCE public.escrow_funder_deposits_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.escrow_funder_deposits_id_seq OWNER TO indexer;

--
-- TOC entry 3585 (class 0 OID 0)
-- Dependencies: 221
-- Name: escrow_funder_deposits_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: indexer
--

ALTER SEQUENCE public.escrow_funder_deposits_id_seq OWNED BY public.escrow_funder_deposits.id;


--
-- TOC entry 222 (class 1259 OID 16563)
-- Name: escrow_milestone_flags; Type: TABLE; Schema: public; Owner: indexer
--

CREATE TABLE public.escrow_milestone_flags (
    contract_id text NOT NULL,
    milestone_index integer NOT NULL,
    approved boolean DEFAULT false NOT NULL,
    disputed boolean DEFAULT false NOT NULL,
    released boolean DEFAULT false NOT NULL,
    resolved boolean DEFAULT false NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT escrow_milestone_flags_milestone_index_check CHECK ((milestone_index >= 0))
);


ALTER TABLE public.escrow_milestone_flags OWNER TO indexer;

--
-- TOC entry 223 (class 1259 OID 16573)
-- Name: escrow_roles; Type: TABLE; Schema: public; Owner: indexer
--

CREATE TABLE public.escrow_roles (
    contract_id text NOT NULL,
    approver text,
    dispute_resolver text,
    platform_address text,
    receiver text,
    release_signer text,
    service_provider text,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL
);


ALTER TABLE public.escrow_roles OWNER TO indexer;

--
-- TOC entry 224 (class 1259 OID 16578)
-- Name: escrow_status; Type: TABLE; Schema: public; Owner: indexer
--

CREATE TABLE public.escrow_status (
    contract_id text NOT NULL,
    is_actived boolean NOT NULL,
    status text,
    reason text,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL
);


ALTER TABLE public.escrow_status OWNER TO indexer;

--
-- TOC entry 225 (class 1259 OID 16583)
-- Name: escrow_trustline; Type: TABLE; Schema: public; Owner: indexer
--

CREATE TABLE public.escrow_trustline (
    contract_id text NOT NULL,
    address text NOT NULL,
    decimals smallint NOT NULL,
    name text NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT escrow_trustline_decimals_check CHECK (((decimals >= 0) AND (decimals <= 100000000)))
);


ALTER TABLE public.escrow_trustline OWNER TO indexer;

--
-- TOC entry 226 (class 1259 OID 16589)
-- Name: escrows; Type: TABLE; Schema: public; Owner: indexer
--

CREATE TABLE public.escrows (
    id bigint NOT NULL,
    contract_id text NOT NULL,
    creator_address text NOT NULL,
    counterparty text,
    asset_code text,
    asset_issuer text,
    status text DEFAULT 'OPEN'::text NOT NULL,
    total_deposited numeric(38,0) DEFAULT 0,
    created_ledger bigint,
    updated_ledger bigint,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.escrows OWNER TO indexer;

--
-- TOC entry 227 (class 1259 OID 16598)
-- Name: escrows_id_seq; Type: SEQUENCE; Schema: public; Owner: indexer
--

CREATE SEQUENCE public.escrows_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.escrows_id_seq OWNER TO indexer;

--
-- TOC entry 3586 (class 0 OID 0)
-- Dependencies: 227
-- Name: escrows_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: indexer
--

ALTER SEQUENCE public.escrows_id_seq OWNED BY public.escrows.id;


--
-- TOC entry 228 (class 1259 OID 16599)
-- Name: ingest_checkpoint; Type: TABLE; Schema: public; Owner: indexer
--

CREATE TABLE public.ingest_checkpoint (
    id integer DEFAULT 1 NOT NULL,
    last_ledger bigint NOT NULL,
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.ingest_checkpoint OWNER TO indexer;

--
-- TOC entry 229 (class 1259 OID 16604)
-- Name: multi_release_escrow; Type: TABLE; Schema: public; Owner: indexer
--

CREATE TABLE public.multi_release_escrow (
    contract_id text NOT NULL,
    contract_base_id text,
    description text,
    engagement_id text NOT NULL,
    platform_fee integer NOT NULL,
    receiver_memo numeric(20,0),
    signer text NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT multi_release_escrow_platform_fee_check CHECK (((platform_fee >= 0) AND (platform_fee <= 10000)))
);


ALTER TABLE public.multi_release_escrow OWNER TO indexer;

--
-- TOC entry 230 (class 1259 OID 16610)
-- Name: multi_release_milestone; Type: TABLE; Schema: public; Owner: indexer
--

CREATE TABLE public.multi_release_milestone (
    contract_id text NOT NULL,
    milestone_index integer NOT NULL,
    amount numeric(39,0) NOT NULL,
    balance numeric(39,0),
    description text,
    status text,
    approved_at timestamp with time zone,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT multi_release_milestone_milestone_index_check CHECK ((milestone_index >= 0))
);


ALTER TABLE public.multi_release_milestone OWNER TO indexer;

--
-- TOC entry 231 (class 1259 OID 16616)
-- Name: single_release_escrow; Type: TABLE; Schema: public; Owner: indexer
--

CREATE TABLE public.single_release_escrow (
    contract_id text NOT NULL,
    contract_base_id text,
    description text,
    engagement_id text NOT NULL,
    platform_fee integer NOT NULL,
    receiver_memo numeric(20,0),
    signer text NOT NULL,
    amount numeric(39,0) NOT NULL,
    balance numeric(39,0),
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT single_release_escrow_platform_fee_check CHECK (((platform_fee >= 0) AND (platform_fee <= 10000)))
);


ALTER TABLE public.single_release_escrow OWNER TO indexer;

--
-- TOC entry 232 (class 1259 OID 16622)
-- Name: single_release_milestone; Type: TABLE; Schema: public; Owner: indexer
--

CREATE TABLE public.single_release_milestone (
    contract_id text NOT NULL,
    milestone_index integer NOT NULL,
    description text,
    status text,
    approved_at timestamp with time zone,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT single_release_milestone_milestone_index_check CHECK ((milestone_index >= 0))
);


ALTER TABLE public.single_release_milestone OWNER TO indexer;

--
-- TOC entry 3331 (class 2604 OID 16628)
-- Name: escrow_deposits id; Type: DEFAULT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.escrow_deposits ALTER COLUMN id SET DEFAULT nextval('public.escrow_deposits_id_seq'::regclass);


--
-- TOC entry 3333 (class 2604 OID 16629)
-- Name: escrow_events id; Type: DEFAULT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.escrow_events ALTER COLUMN id SET DEFAULT nextval('public.escrow_events_id_seq'::regclass);


--
-- TOC entry 3339 (class 2604 OID 16630)
-- Name: escrow_funder_deposits id; Type: DEFAULT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.escrow_funder_deposits ALTER COLUMN id SET DEFAULT nextval('public.escrow_funder_deposits_id_seq'::regclass);


--
-- TOC entry 3347 (class 2604 OID 16631)
-- Name: escrows id; Type: DEFAULT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.escrows ALTER COLUMN id SET DEFAULT nextval('public.escrows_id_seq'::regclass);


--
-- TOC entry 3365 (class 2606 OID 16633)
-- Name: escrow_deposits escrow_deposits_escrow_id_tx_hash_key; Type: CONSTRAINT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.escrow_deposits
    ADD CONSTRAINT escrow_deposits_escrow_id_tx_hash_key UNIQUE (escrow_id, tx_hash);


--
-- TOC entry 3367 (class 2606 OID 16635)
-- Name: escrow_deposits escrow_deposits_pkey; Type: CONSTRAINT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.escrow_deposits
    ADD CONSTRAINT escrow_deposits_pkey PRIMARY KEY (id);


--
-- TOC entry 3372 (class 2606 OID 16637)
-- Name: escrow_events escrow_events_pkey; Type: CONSTRAINT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.escrow_events
    ADD CONSTRAINT escrow_events_pkey PRIMARY KEY (id);


--
-- TOC entry 3374 (class 2606 OID 16639)
-- Name: escrow_events escrow_events_tx_hash_event_index_key; Type: CONSTRAINT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.escrow_events
    ADD CONSTRAINT escrow_events_tx_hash_event_index_key UNIQUE (tx_hash, event_index);


--
-- TOC entry 3380 (class 2606 OID 16641)
-- Name: escrow_flags escrow_flags_pkey; Type: CONSTRAINT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.escrow_flags
    ADD CONSTRAINT escrow_flags_pkey PRIMARY KEY (contract_id);


--
-- TOC entry 3385 (class 2606 OID 16643)
-- Name: escrow_funder_deposits escrow_funder_deposits_pkey; Type: CONSTRAINT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.escrow_funder_deposits
    ADD CONSTRAINT escrow_funder_deposits_pkey PRIMARY KEY (id);


--
-- TOC entry 3399 (class 2606 OID 16645)
-- Name: escrow_roles escrow_roles_pkey; Type: CONSTRAINT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.escrow_roles
    ADD CONSTRAINT escrow_roles_pkey PRIMARY KEY (contract_id);


--
-- TOC entry 3402 (class 2606 OID 16647)
-- Name: escrow_status escrow_status_pkey; Type: CONSTRAINT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.escrow_status
    ADD CONSTRAINT escrow_status_pkey PRIMARY KEY (contract_id);


--
-- TOC entry 3406 (class 2606 OID 16649)
-- Name: escrow_trustline escrow_trustline_pkey; Type: CONSTRAINT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.escrow_trustline
    ADD CONSTRAINT escrow_trustline_pkey PRIMARY KEY (contract_id);


--
-- TOC entry 3409 (class 2606 OID 16651)
-- Name: escrows escrows_contract_id_key; Type: CONSTRAINT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.escrows
    ADD CONSTRAINT escrows_contract_id_key UNIQUE (contract_id);


--
-- TOC entry 3411 (class 2606 OID 16653)
-- Name: escrows escrows_pkey; Type: CONSTRAINT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.escrows
    ADD CONSTRAINT escrows_pkey PRIMARY KEY (id);


--
-- TOC entry 3416 (class 2606 OID 16655)
-- Name: ingest_checkpoint ingest_checkpoint_pkey; Type: CONSTRAINT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.ingest_checkpoint
    ADD CONSTRAINT ingest_checkpoint_pkey PRIMARY KEY (id);


--
-- TOC entry 3421 (class 2606 OID 16657)
-- Name: multi_release_escrow multi_release_escrow_pkey; Type: CONSTRAINT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.multi_release_escrow
    ADD CONSTRAINT multi_release_escrow_pkey PRIMARY KEY (contract_id);


--
-- TOC entry 3363 (class 2606 OID 16659)
-- Name: escrow_config pk_escrow_config; Type: CONSTRAINT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.escrow_config
    ADD CONSTRAINT pk_escrow_config PRIMARY KEY (contract_id, key);


--
-- TOC entry 3397 (class 2606 OID 16661)
-- Name: escrow_milestone_flags pk_ms_flags; Type: CONSTRAINT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.escrow_milestone_flags
    ADD CONSTRAINT pk_ms_flags PRIMARY KEY (contract_id, milestone_index);


--
-- TOC entry 3424 (class 2606 OID 16663)
-- Name: multi_release_milestone pk_multi_milestone; Type: CONSTRAINT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.multi_release_milestone
    ADD CONSTRAINT pk_multi_milestone PRIMARY KEY (contract_id, milestone_index);


--
-- TOC entry 3432 (class 2606 OID 16665)
-- Name: single_release_milestone pk_single_milestone; Type: CONSTRAINT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.single_release_milestone
    ADD CONSTRAINT pk_single_milestone PRIMARY KEY (contract_id, milestone_index);


--
-- TOC entry 3429 (class 2606 OID 16667)
-- Name: single_release_escrow single_release_escrow_pkey; Type: CONSTRAINT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.single_release_escrow
    ADD CONSTRAINT single_release_escrow_pkey PRIMARY KEY (contract_id);


--
-- TOC entry 3390 (class 2606 OID 16669)
-- Name: escrow_funder_deposits uq_deposits_external; Type: CONSTRAINT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.escrow_funder_deposits
    ADD CONSTRAINT uq_deposits_external UNIQUE (contract_id, external_id);


--
-- TOC entry 3361 (class 1259 OID 16670)
-- Name: idx_config_enabled; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_config_enabled ON public.escrow_config USING btree (enabled);


--
-- TOC entry 3386 (class 1259 OID 16671)
-- Name: idx_deposits_contract_time; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_deposits_contract_time ON public.escrow_funder_deposits USING btree (contract_id, occurred_at DESC);


--
-- TOC entry 3387 (class 1259 OID 16672)
-- Name: idx_deposits_depositor; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_deposits_depositor ON public.escrow_funder_deposits USING btree (depositor);


--
-- TOC entry 3368 (class 1259 OID 16673)
-- Name: idx_deposits_escrow; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_deposits_escrow ON public.escrow_deposits USING btree (escrow_id);


--
-- TOC entry 3369 (class 1259 OID 16674)
-- Name: idx_deposits_from; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_deposits_from ON public.escrow_deposits USING btree (from_address);


--
-- TOC entry 3370 (class 1259 OID 16675)
-- Name: idx_deposits_ledger; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_deposits_ledger ON public.escrow_deposits USING btree (ledger);


--
-- TOC entry 3388 (class 1259 OID 16676)
-- Name: idx_deposits_txhash; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_deposits_txhash ON public.escrow_funder_deposits USING btree (tx_hash);


--
-- TOC entry 3412 (class 1259 OID 16677)
-- Name: idx_escrows_contract; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_escrows_contract ON public.escrows USING btree (contract_id);


--
-- TOC entry 3413 (class 1259 OID 16678)
-- Name: idx_escrows_creator; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_escrows_creator ON public.escrows USING btree (creator_address);


--
-- TOC entry 3414 (class 1259 OID 16679)
-- Name: idx_escrows_status; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_escrows_status ON public.escrows USING btree (status);


--
-- TOC entry 3375 (class 1259 OID 16680)
-- Name: idx_events_contract; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_events_contract ON public.escrow_events USING btree (contract_id);


--
-- TOC entry 3376 (class 1259 OID 16681)
-- Name: idx_events_escrow; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_events_escrow ON public.escrow_events USING btree (escrow_id);


--
-- TOC entry 3377 (class 1259 OID 16682)
-- Name: idx_events_ledger; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_events_ledger ON public.escrow_events USING btree (ledger);


--
-- TOC entry 3378 (class 1259 OID 16683)
-- Name: idx_events_type; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_events_type ON public.escrow_events USING btree (event_type);


--
-- TOC entry 3381 (class 1259 OID 16684)
-- Name: idx_flags_disputed; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_flags_disputed ON public.escrow_flags USING btree (disputed);


--
-- TOC entry 3382 (class 1259 OID 16685)
-- Name: idx_flags_released; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_flags_released ON public.escrow_flags USING btree (released);


--
-- TOC entry 3383 (class 1259 OID 16686)
-- Name: idx_flags_resolved; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_flags_resolved ON public.escrow_flags USING btree (resolved);


--
-- TOC entry 3391 (class 1259 OID 16687)
-- Name: idx_msflags_approved; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_msflags_approved ON public.escrow_milestone_flags USING btree (approved);


--
-- TOC entry 3392 (class 1259 OID 16688)
-- Name: idx_msflags_contract; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_msflags_contract ON public.escrow_milestone_flags USING btree (contract_id);


--
-- TOC entry 3393 (class 1259 OID 16689)
-- Name: idx_msflags_disputed; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_msflags_disputed ON public.escrow_milestone_flags USING btree (disputed);


--
-- TOC entry 3394 (class 1259 OID 16690)
-- Name: idx_msflags_released; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_msflags_released ON public.escrow_milestone_flags USING btree (released);


--
-- TOC entry 3395 (class 1259 OID 16691)
-- Name: idx_msflags_resolved; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_msflags_resolved ON public.escrow_milestone_flags USING btree (resolved);


--
-- TOC entry 3417 (class 1259 OID 16692)
-- Name: idx_multi_created_at; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_multi_created_at ON public.multi_release_escrow USING btree (created_at);


--
-- TOC entry 3418 (class 1259 OID 16693)
-- Name: idx_multi_engagement; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_multi_engagement ON public.multi_release_escrow USING btree (engagement_id);


--
-- TOC entry 3422 (class 1259 OID 16694)
-- Name: idx_multi_ms_contract; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_multi_ms_contract ON public.multi_release_milestone USING btree (contract_id);


--
-- TOC entry 3419 (class 1259 OID 16695)
-- Name: idx_multi_signer; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_multi_signer ON public.multi_release_escrow USING btree (signer);


--
-- TOC entry 3400 (class 1259 OID 16696)
-- Name: idx_roles_contract; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_roles_contract ON public.escrow_roles USING btree (contract_id);


--
-- TOC entry 3425 (class 1259 OID 16697)
-- Name: idx_single_created_at; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_single_created_at ON public.single_release_escrow USING btree (created_at);


--
-- TOC entry 3426 (class 1259 OID 16698)
-- Name: idx_single_engagement; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_single_engagement ON public.single_release_escrow USING btree (engagement_id);


--
-- TOC entry 3430 (class 1259 OID 16699)
-- Name: idx_single_ms_contract; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_single_ms_contract ON public.single_release_milestone USING btree (contract_id);


--
-- TOC entry 3427 (class 1259 OID 16700)
-- Name: idx_single_signer; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_single_signer ON public.single_release_escrow USING btree (signer);


--
-- TOC entry 3403 (class 1259 OID 16701)
-- Name: idx_status_active; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_status_active ON public.escrow_status USING btree (is_actived);


--
-- TOC entry 3404 (class 1259 OID 16702)
-- Name: idx_status_time; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_status_time ON public.escrow_status USING btree (updated_at);


--
-- TOC entry 3407 (class 1259 OID 16703)
-- Name: idx_trustline_address; Type: INDEX; Schema: public; Owner: indexer
--

CREATE INDEX idx_trustline_address ON public.escrow_trustline USING btree (address);


--
-- TOC entry 3435 (class 2620 OID 16704)
-- Name: escrow_funder_deposits trig_deposits_updated_at; Type: TRIGGER; Schema: public; Owner: indexer
--

CREATE TRIGGER trig_deposits_updated_at BEFORE UPDATE ON public.escrow_funder_deposits FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- TOC entry 3433 (class 2606 OID 16705)
-- Name: escrow_deposits escrow_deposits_escrow_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.escrow_deposits
    ADD CONSTRAINT escrow_deposits_escrow_id_fkey FOREIGN KEY (escrow_id) REFERENCES public.escrows(id);


--
-- TOC entry 3434 (class 2606 OID 16710)
-- Name: escrow_events escrow_events_escrow_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: indexer
--

ALTER TABLE ONLY public.escrow_events
    ADD CONSTRAINT escrow_events_escrow_id_fkey FOREIGN KEY (escrow_id) REFERENCES public.escrows(id);


-- Completed on 2025-09-16 06:10:30 -03

--
-- PostgreSQL database dump complete
--

